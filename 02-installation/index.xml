<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Installation on Hugo Relearn Theme</title><link>https://kubernetes.ansilh.com/02-installation/index.html</link><description>Recent content in Installation on Hugo Relearn Theme</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 Dec 2018 17:15:52 +0000</lastBuildDate><atom:link href="https://kubernetes.ansilh.com/02-installation/index.xml" rel="self" type="application/rss+xml"/><item><title>Install VirtualBox</title><link>https://kubernetes.ansilh.com/02-installation/01-vbox-install/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/01-vbox-install/index.html</guid><description> Download the latest VBox installer and VBox Extension Pack
https://download.virtualbox.org/virtualbox/LATEST.TXT https://download.virtualbox.org/virtualbox/&amp;lt;LATEST&amp;gt;/ Installation procedure is available in below link
https://www.wikihow.com/Install-VirtualBox</description></item><item><title>VirtualBox Network Configuration</title><link>https://kubernetes.ansilh.com/02-installation/02-nw-setup/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/02-nw-setup/index.html</guid><description> Create HostOnly network ( Default will be 192.168.56.0/24) Open Virtual Box Got to menu and navigate to File -&amp;gt;Host Network Manager Then click &amp;ldquo;Create&amp;rdquo; This will create a Host-Only Network. DHCP should be disabled on this network.
Internet access is needed on all VMs (for downloading needed binaries).
Make sure you can see the NAT network.(If not , create one).
VBox Host Networking HostOnly 192.168.56.0/24 NAT VBOX Defined</description></item><item><title>Ubuntu 16.04 Installation</title><link>https://kubernetes.ansilh.com/02-installation/03-ubuntu-install/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/03-ubuntu-install/index.html</guid><description>Download Ubuntu 16.04 ISO http://releases.ubuntu.com/16.04/ubuntu-16.04.5-server-amd64.iso Create a template VM which will be used to clone all needed VMs
You need at least 50GB free space to host all VMs All VMs will be placed in a directory called (Don&amp;rsquo;t create these manually now!) DRIVE_NAME:/VMs/ (Replace DRIVE_NAME with a mount point or Driver name) Install Ubuntu 16.04 with latest patches VM configuration VM Name : k8s-master-01 Memory : 2 GB CPU : 2 Disk : 100GB HostOnly interface : 1 (ref.</description></item><item><title>Install Docker</title><link>https://kubernetes.ansilh.com/02-installation/04-docker-install/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/04-docker-install/index.html</guid><description>In this session, we will install and setup docker in a simple and easy way on Ubuntu 16.04.
Add gpg key to aptitude $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Add repository $ sudo add-apt-repository &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;#34; Refresh repository $ sudo apt-get update Verify whether docker is available in repo or not $ sudo apt-cache policy docker-cedocker-ce: Installed: (none) Candidate: 5:18.09.0~3-0~ubuntu-xenial Version table: 5:18.09.0~3-0~ubuntu-xenial 500 .</description></item><item><title>Setup Golang</title><link>https://kubernetes.ansilh.com/02-installation/05-golang-setup/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/05-golang-setup/index.html</guid><description>Download Golang tarball $ curl -O https://dl.google.com/go/go1.11.4.linux-amd64.tar.gz Extract the contents $ tar -xvf go1.11.4.linux-amd64.tar.gz Move the contents to /usr/local directory $ sudo mv go /usr/local/ Add the environmental variable GOPATH to .profile cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;~/.profile export GOPATH=\$HOME/work export PATH=\$PATH:/usr/local/go/bin:\$GOPATH/bin EOF Create the work directory $ mkdir $HOME/work Load the profile $ source ~/.profile Verify Golang setup $ go versiongo version go1.11.4 linux/amd64 Create a directory tree to map to a github repository $ mkdir -p $GOPATH/src/github.</description></item><item><title>Build a Demo WebApp</title><link>https://kubernetes.ansilh.com/02-installation/06-demo-webapp/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/06-demo-webapp/index.html</guid><description>Create a directory for the demo app. $ mkdir -p ${GOPATH}/src/github.com/ansilh/demo-webapp Create demo-webapp.go file $ vi ${GOPATH}/src/github.com/ansilh/demo-webapp/demo-webapp.gopackage main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;log&amp;#34; ) func demoDefault(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;#34;404 - Page not found - This is a dummy default backend&amp;#34;) // send data to client side } func main() { http.HandleFunc(&amp;#34;/&amp;#34;, demoDefault) // set router err := http.ListenAndServe(&amp;#34;:9090&amp;#34;, nil) // set listen port if err != nil { log.</description></item><item><title>Build a Docker image</title><link>https://kubernetes.ansilh.com/02-installation/07-build-docker-image/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/07-build-docker-image/index.html</guid><description>Create a Docker Hub account
Letâ€™s create a directory to store the Dockerfile $ mkdir ~/demo-webapp Copy the pre-built program $ cp $GOPATH/bin/demo-webapp ~/demo-webapp/ Create a Dockerfile. $ cd ~/demo-webapp/ $ vi DockerfileFROM scratch LABEL maintainer=&amp;#34;Ansil H&amp;#34; LABEL email=&amp;#34;ansilh@gmail.com&amp;#34; COPY demo-webapp / CMD [&amp;#34;/demo-webapp&amp;#34;] Build the docker image $ sudo docker build -t &amp;lt;docker login name&amp;gt;/demo-webapp . Eg:- $ sudo docker build -t ansilh/demo-webapp . Login to Docker Hub using your credentials $ docker login Push image to Docker hub $ docker push &amp;lt;docker login name&amp;gt;/demo-webapp Eg:- $ docker push ansilh/demo-webappCongratulations !</description></item><item><title>Docker - Container management</title><link>https://kubernetes.ansilh.com/02-installation/08-run-docker/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/08-run-docker/index.html</guid><description>Start a Container Here we map port 80 of host to port 9090 of cotainer Verify application from browser Press Ctrl+c to exit container $ docker run -p 80:9090 ansilh/demo-webapp Start a Container in detach mode $ docker run -d -p 80:9090 ansilh/demo-webapp List Container $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4c8364e0d031 ansilh/demo-webapp &amp;#34;/demo-webapp&amp;#34; 11 seconds ago Up 10 seconds 0.0.0.0:80-&amp;gt;9090/tcp zen_gauss List all containers including stopped containers $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4c8364e0d031 ansilh/demo-webapp &amp;#34;/demo-webapp&amp;#34; 2 minutes ago Up 2 minutes 0.</description></item><item><title>Install kubeadm</title><link>https://kubernetes.ansilh.com/02-installation/09-install-kubeadm/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/09-install-kubeadm/index.html</guid><description>Note Verify the MAC address and product_uuid are unique for every node (ip link or ifconfig -a and sudo cat /sys/class/dmi/id/product_uuid)
Download pre-requisites $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y apt-transport-https curl Add gpg key for apt $ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg |sudo apt-key add - Add apt repository $ cat &amp;lt;&amp;lt;EOF |sudo tee -a /etc/apt/sources.list.d/kubernetes.list deb https://apt.kubernetes.io/ kubernetes-xenial main EOF Install kubelet , kubeadm and kubectl $ sudo apt-get update $ sudo apt-get install -y kubelet kubeadm kubectl $ sudo apt-mark hold kubelet kubeadm kubectlRepeat the same steps on worker node</description></item><item><title>Deploy master Node</title><link>https://kubernetes.ansilh.com/02-installation/10-master/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/10-master/index.html</guid><description>Initialize kubeadm with pod IP range $ sudo kubeadm init --apiserver-advertise-address=192.168.56.201 --pod-network-cidr=10.10.0.0/16 --service-cidr=192.168.10.0/24 Configure kubectl $ mkdir -p $HOME/.kube $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config $ sudo chown $(id -u):$(id -g) $HOME/.kube/config Verify master node status $ kubectl cluster-info Output will be like below Kubernetes master is running at https://192.168.56.201:6443 KubeDNS is running at https://192.168.56.201:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy To further debug and diagnose cluster problems, use &amp;#39;kubectl cluster-info dump&amp;#39;. Info Move to next session to deploy network plugin.</description></item><item><title>Deploy Network Plugin - Calico</title><link>https://kubernetes.ansilh.com/02-installation/11-network-plugin/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/11-network-plugin/index.html</guid><description>Apply RBAC rules (More about RBAC will discuss later) $ kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml Download Calico deployment YAML $ wget https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml Edit CALICO_IPV4POOL_CIDR value to 10.10.0.0/16 - name: CALICO_IPV4POOL_CIDR value: &amp;#34;10.10.0.0/16&amp;#34; Add name: IP_AUTODETECTION_METHOD &amp;amp; value: &amp;quot;can-reach=192.168.56.1&amp;quot; (This IP should be the host only network ip on your laptop) ... image: quay.io/calico/node:v3.3.2 env: - name: IP_AUTODETECTION_METHOD value: &amp;#34;can-reach=192.168.56.1&amp;#34; ... Apply Deployment $ kubectl apply -f calico.yaml Make sure the READY status should show same value on left and right side of / and Pod STATUS should be Running $ kubectl get pods -n kube-system |nl1 NAME READY STATUS RESTARTS AGE 2 calico-node-2pwv9 2/2 Running 0 20m 3 coredns-86c58d9df4-d9q2l 1/1 Running 0 21m 4 coredns-86c58d9df4-rwv7r 1/1 Running 0 21m 5 etcd-k8s-master-01 1/1 Running 0 20m 6 kube-apiserver-k8s-master-01 1/1 Running 0 20m 7 kube-controller-manager-k8s-master-01 1/1 Running 0 20m 8 kube-proxy-m6m9n 1/1 Running 0 21m 9 kube-scheduler-k8s-master-01 1/1 Running 0 20m Tip Contact the Trainer if the output is not the expected one after few minutes (~3-4mins).</description></item><item><title>Add worker node to cluster</title><link>https://kubernetes.ansilh.com/02-installation/12-worker/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubernetes.ansilh.com/02-installation/12-worker/index.html</guid><description> Get discovery secret from Master node. $ echo sha256:$(openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2&amp;gt;/dev/null | sha256sum | cut -d&amp;#39; &amp;#39; -f1) Get node join token from Master node. $ kubeadm token list |grep bootstra |awk &amp;#39;{print $1}&amp;#39; Execute kubeadm command to add the Worker to cluster $ sudo kubeadm join 192.168.56.201:6443 --token &amp;lt;token&amp;gt; --discovery-token-ca-cert-hash &amp;lt;discovery hash&amp;gt; Verify system Pod status $ kubectl get pods -n kube-system |nl Output 1 NAME READY STATUS RESTARTS AGE 2 calico-node-2pwv9 2/2 Running 0 20m 3 calico-node-hwnfh 2/2 Running 0 19m 4 coredns-86c58d9df4-d9q2l 1/1 Running 0 21m 5 coredns-86c58d9df4-rwv7r 1/1 Running 0 21m 6 etcd-k8s-master-01 1/1 Running 0 20m 7 kube-apiserver-k8s-master-01 1/1 Running 0 20m 8 kube-controller-manager-k8s-master-01 1/1 Running 0 20m 9 kube-proxy-m6m9n 1/1 Running 0 21m 10 kube-proxy-shwgp 1/1 Running 0 19m 11 kube-scheduler-k8s-master-01 1/1 Running 0 20m</description></item></channel></rss>