<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Services on Hugo Relearn Theme</title><link>https://kubernetes.ansilh.com/07-services/index.html</link><description>Recent content in Services on Hugo Relearn Theme</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 Dec 2018 17:15:52 +0000</lastBuildDate><atom:link href="https://kubernetes.ansilh.com/07-services/index.xml" rel="self" type="application/rss+xml"/><item><title>Expose services in Pod</title><link>https://kubernetes.ansilh.com/07-services/01-expose-pod/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/07-services/01-expose-pod/index.html</guid><description>Service A Coffee Pod running in cluster and its listening on port 9090 on Pod&amp;rsquo;s IP. How can we expose that service to external world so that users can access it ?
We need to expose the service.
As we know , the Pod IP is not routable outside of the cluster. So we need a mechanism to reach the host&amp;rsquo;s port and then that traffic should be diverted to Pod&amp;rsquo;s port.</description></item><item><title>NodePort</title><link>https://kubernetes.ansilh.com/07-services/02-nodeport/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/07-services/02-nodeport/index.html</guid><description>NodePort Exposes the service on each Node’s IP at a static port (the NodePort). A ClusterIP service, to which the NodePort service will route, is automatically created. You’ll be able to contact the NodePort service, from outside the cluster, by requesting :.
How nodePort works kube-proxy watches the Kubernetes master for the addition and removal of Service and Endpoints objects.
(We will discuss about Endpoints later in this session.)
For each Service, it opens a port (randomly chosen) on the local node.</description></item><item><title>ClusterIP</title><link>https://kubernetes.ansilh.com/07-services/03-clusterip/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/07-services/03-clusterip/index.html</guid><description>It exposes the service on a cluster-internal IP.
When we expose a pod using kubectl expose command , we are creating a service object in API.
Choosing this value makes the service only reachable from within the cluster. This is the default ServiceType.
We can see the Service spec using --dry-run &amp;amp; --output=yaml
$ kubectl expose pod coffee --port=80 --target-port=9090 --type=ClusterIP --dry-run --output=yaml Output
apiVersion: v1 kind: Service metadata: creationTimestamp: null labels: run: coffee name: coffee spec: ports: - port: 80 protocol: TCP targetPort: 9090 selector: run: coffee type: ClusterIP status: loadBalancer: {}Cluster IP service is useful when you don&amp;rsquo;t want to expose the service to external world.</description></item><item><title>LoadBalancer</title><link>https://kubernetes.ansilh.com/07-services/04-loadbalancer/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/07-services/04-loadbalancer/index.html</guid><description>Exposes the service externally using a cloud provider’s load balancer. NodePort and ClusterIP services, to which the external load balancer will route, are automatically created.
We will discuss more about this topic later in this training.</description></item><item><title>Endpoints</title><link>https://kubernetes.ansilh.com/07-services/05-endpoints/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/07-services/05-endpoints/index.html</guid><description>Pods behind a service. Lets describe the service to see how the mapping of Pods works in a service object.
(Yes , we are slowly moving from general wordings to pure kubernetes terms)
$ kubectl describe service coffee Name: coffee Namespace: default Labels: run=coffee Annotations: &amp;lt;none&amp;gt; Selector: run=coffee Type: NodePort IP: 192.168.10.86 Port: &amp;lt;unset&amp;gt; 80/TCP TargetPort: 9090/TCP NodePort: &amp;lt;unset&amp;gt; 30391/TCP Endpoints: 10.10.1.13:9090 Session Affinity: None External Traffic Policy: ClusterHere the label run=coffee is the one which creates the mapping from service to Pod.</description></item></channel></rss>