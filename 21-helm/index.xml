<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Helm on Hugo Relearn Theme</title><link>https://kubernetes.ansilh.com/21-helm/index.html</link><description>Recent content in Helm on Hugo Relearn Theme</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 Dec 2018 17:15:52 +0000</lastBuildDate><atom:link href="https://kubernetes.ansilh.com/21-helm/index.xml" rel="self" type="application/rss+xml"/><item><title>Installation</title><link>https://kubernetes.ansilh.com/21-helm/01-installation/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/21-helm/01-installation/index.html</guid><description>Download Helm binaries Go to https://github.com/helm/helm/releases Copy download location from Installation and Upgrading section. $ wget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.0-linux-amd64.tar.gzExtract tarball $ tar -xvf helm-v2.13.0-linux-amd64.tar.gzConfigure Helm client. $ sudo mv linux-amd64/helm /usr/local/bin/helm $ helm version Output
Client: &amp;amp;version.Version{SemVer:&amp;#34;v2.13.0&amp;#34;, GitCommit:&amp;#34;79d07943b03aea2b76c12644b4b54733bc5958d6&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;} Error: could not find tillerHelm Server side configuration - Tiller cat &amp;lt;&amp;lt;EOF &amp;gt;tiller-rbac.yaml apiVersion: v1 kind: ServiceAccount metadata: name: tiller namespace: kube-system --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: tiller roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: tiller namespace: kube-system EOF$ kubectl create -f tiller-rbac.</description></item><item><title>A Minimal Package</title><link>https://kubernetes.ansilh.com/21-helm/02-demo/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/21-helm/02-demo/index.html</guid><description>In this demo , we will create an Nginx deployment with one replica. This demo is like more or less applying a deployment yaml . But in upcoming sessions we will see how we can leverage helm to customize the deployment without modifying yaml specs.
Create a demo helm-nginx-pkg package $ mkdir helm-nginx-pkg Create a templates directory. $ mkdir helm-nginx-pkg/templatesCreate a deployment yaml inside templates diretory. $ kubectl run nginx-deployment --image=nginx:1.</description></item><item><title>Lint</title><link>https://kubernetes.ansilh.com/21-helm/03-lint/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/21-helm/03-lint/index.html</guid><description>Linting Helm lint will help to correct and standardize the package format
$ helm lint ./helm-nginx-pkg/==&amp;gt; Linting ./helm-nginx-pkg/ [ERROR] Chart.yaml: directory name (helm-nginx-pkg) and chart name (nginx-deployment) must be the same [INFO] Chart.yaml: icon is recommended [INFO] values.yaml: file does not exist Error: 1 chart(s) linted, 1 chart(s) failedLets correct the errors $ mv helm-nginx-pkg nginx-deployment Add an icon path (we will see where its used later) cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;nginx-deployment/Chart.yaml icon: &amp;#34;https://img.</description></item><item><title>Upgrade</title><link>https://kubernetes.ansilh.com/21-helm/04-upgrade/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/21-helm/04-upgrade/index.html</guid><description>Deployment Modify values file with below content cat &amp;lt;&amp;lt;EOF &amp;gt;nginx-deployment/values.yaml replicaCount: 2 image: repository: &amp;#34;nginx&amp;#34; tag: &amp;#34;1.14&amp;#34; EOFModify deployment template $ vi nginx-deployment/templates/nginx-deployment.yamlapiVersion: apps/v1 kind: Deployment metadata: creationTimestamp: null labels: run: nginx-deployment name: nginx-deployment spec: replicas: {{ .Values.replicaCount }} # &amp;lt;-- This is value is referred from values.yaml `replicaCount` field selector: matchLabels: run: nginx-deployment strategy: {} template: metadata: creationTimestamp: null labels: run: nginx-deployment spec: containers: - image: {{ .Values.image.repository }}:{{ .</description></item><item><title>Rollback</title><link>https://kubernetes.ansilh.com/21-helm/05-rollback/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/21-helm/05-rollback/index.html</guid><description>List revisions $ helm list Output
NAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACE ungaged-possum 2 Fri Mar 15 18:17:52 2019 DEPLOYED nginx-deployment-1 defaultRollback to revision 1 $ helm rollback ungaged-possum 1 Output
Rollback was a success! Happy Helming! List the revision after rollback $ helm list Output
NAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACE ungaged-possum 3 Sat Mar 16 10:14:47 2019 DEPLOYED nginx-deployment-1 defaultVerify rollback $ kubectl get pods Output</description></item><item><title>Helm Create</title><link>https://kubernetes.ansilh.com/21-helm/06-helm-create/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/21-helm/06-helm-create/index.html</guid><description>With create command , we can create a standard helm directory/file structure which can be modified for our package.
$ helm create mychart$ tree mychart/mychart/ ├── Chart.yaml # A YAML file containing information about the chart. ├── charts # A directory containing any charts upon which this chart depends. ├── templates # A directory of templates that, when combined with values, will generate valid Kubernetes manifest files. │ ├── NOTES.txt # A plain text file containing short usage notes.</description></item><item><title>Kubeapps</title><link>https://kubernetes.ansilh.com/21-helm/07-kubeapp/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/21-helm/07-kubeapp/index.html</guid><description>Kubeapps is a web-based UI for deploying and managing applications in Kubernetes clusters
Kubeapps Installation List present repos $ helm repo listNAME URL stable https://kubernetes-charts.storage.googleapis.com local http://127.0.0.1:8879/charts Add bitnami repo $ helm repo add bitnami https://charts.bitnami.com/bitnami&amp;ldquo;bitnami&amp;rdquo; has been added to your repositories
$ helm repo listNAME URL stable https://kubernetes-charts.storage.googleapis.com local http://127.0.0.1:8879/charts bitnami https://charts.bitnami.com/bitnami Install Kubeapps $ helm install --name kubeapps --namespace kubeapps bitnami/kubeappsIf it fails with below error , execute install one more time</description></item><item><title>ChartMuseum</title><link>https://kubernetes.ansilh.com/21-helm/08-chart_museum/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/21-helm/08-chart_museum/index.html</guid><description>We can use ChartMuseum to host our own Helm packages. In this session , we will configure ChartMuseum and will add the repository to Kubeapps We will also upload the nginx-deployment helm package that we have created in earlier session to our local repository.
Download and configure chartmuseum $ curl -LO https://s3.amazonaws.com/chartmuseum/release/latest/bin/linux/amd64/chartmuseum Info We will be using /{HOME}/chartstorage directory to store the packages
$ chmod +x ./chartmuseum $ sudo mv .</description></item><item><title>ChartMuseum UI</title><link>https://kubernetes.ansilh.com/21-helm/09-chartmuseum-ui/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/21-helm/09-chartmuseum-ui/index.html</guid><description>Earlier we used curl command to upload our first helm package. In this session , we will configure a UI for our local repository so that we can add/delete packages easily.
Set CHART_MUSESUM_URL variable to the local repo URL. CHART_MUSESUM_URL=http://192.168.31.20:8090 Create a deployment and service for UI. cat &amp;lt;&amp;lt;EOF &amp;gt;chartmuseum-ui.yaml apiVersion: v1 kind: Service metadata: creationTimestamp: null name: chartmuseum-ui spec: ports: - port: 80 protocol: TCP targetPort: 8080 selector: run: chartmuseum-ui type: LoadBalancer --- apiVersion: apps/v1 kind: Deployment metadata: creationTimestamp: null labels: run: chartmuseum-ui name: chartmuseum-ui spec: replicas: 1 selector: matchLabels: run: chartmuseum-ui strategy: {} template: metadata: creationTimestamp: null labels: run: chartmuseum-ui spec: containers: - env: - name: CHART_MUSESUM_URL value: ${CHART_MUSESUM_URL} image: idobry/chartmuseumui:latest name: chartmuseum-ui ports: - containerPort: 8080 EOF Apply the spec to kubeapps namespace $ kubectl create -f chartmuseum-ui.</description></item></channel></rss>