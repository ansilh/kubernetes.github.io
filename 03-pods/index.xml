<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pods &amp; Nodes on Hugo Relearn Theme</title><link>https://kubernetes.ansilh.com/03-pods/index.html</link><description>Recent content in Pods &amp; Nodes on Hugo Relearn Theme</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 Dec 2018 17:15:52 +0000</lastBuildDate><atom:link href="https://kubernetes.ansilh.com/03-pods/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://kubernetes.ansilh.com/03-pods/01-what-is-pod/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/03-pods/01-what-is-pod/index.html</guid><description>What is a Pod ? A Pod is the basic building block of Kubernetes–the smallest and simplest unit in the Kubernetes object model that you create or deploy. A Pod represents a running process on your cluster
The “one-container-per-Pod” model is the most common Kubernetes use case; in this case, you can think of a Pod as a wrapper around a single container, and Kubernetes manages the Pods rather than the containers directly.</description></item><item><title>Create a Pod - Declarative</title><link>https://kubernetes.ansilh.com/03-pods/02-create-pod/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/03-pods/02-create-pod/index.html</guid><description>After completing this session , you will be able to create Pod declaratively and will be able to login to check services running on other pods.
So lets get started.
Lets Check the running Pods k8s@k8s-master-01:~$ kubectl get pods No resources found. k8s@k8s-master-01:~$Nothing Lets create one using a YAML file $ vi pod.yamlapiVersion: v1 kind: Pod metadata: name: coffee-app spec: containers: - image: ansilh/demo-coffee name: coffeeApply YAML using kubectl command $ kubectl apply -f pod.</description></item><item><title>Create a Pod - Imperative</title><link>https://kubernetes.ansilh.com/03-pods/03-create-pod/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/03-pods/03-create-pod/index.html</guid><description>Execute kubectl command to create a Pod. $ kubectl run coffee --image=ansilh/demo-coffee --restart=Never pod/coffee createdVerify Pod status $ kubectl get pods -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES coffee 0/1 ContainerCreating 0 6s &amp;lt;none&amp;gt; k8s-worker-01 &amp;lt;none&amp;gt; &amp;lt;none&amp;gt; $ kubectl get pods -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES coffee 1/1 Running 0 19s 192.168.1.15 k8s-worker-01 &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;Start a CentOS container $ kubectl run centos-pod --image=tutum/centos --restart=Never pod/centos-pod createdverify status of the Pod ; it should be in Running $ kubectl get pods NAME READY STATUS RESTARTS AGE centos-pod 1/1 Running 0 25s coffee 1/1 Running 0 2m10sLogon to CentOS Pod $ kubectl exec -it centos-pod -- /bin/bash [root@centos-pod /]#Verify Coffee App status [root@centos-pod /]# curl -s 192.</description></item><item><title>Nodes</title><link>https://kubernetes.ansilh.com/03-pods/04-nodes/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/03-pods/04-nodes/index.html</guid><description>In this session , we will explore the node details
List nodes $ k8s@k8s-master-01:~$ kubectl get nodesOutput
NAME STATUS ROLES AGE VERSION k8s-master-01 Ready master 38h v1.13.1 k8s-worker-01 Ready &amp;lt;none&amp;gt; 38h v1.13.1 Extended listing $ kubectl get nodes -o wideOutput
NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME k8s-master-01 Ready master 38h v1.13.1 192.168.56.201 &amp;lt;none&amp;gt; Ubuntu 16.04.5 LTS 4.4.0-131-generic docker://18.9.0 k8s-worker-01 Ready &amp;lt;none&amp;gt; 38h v1.13.1 192.168.56.202 &amp;lt;none&amp;gt; Ubuntu 16.</description></item><item><title>Namespaces</title><link>https://kubernetes.ansilh.com/03-pods/05-namespaces/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/03-pods/05-namespaces/index.html</guid><description>What is a namespace We have see namespaces in Linux , which ideally isolates objects and here also the concept is same but serves a different purpose. Suppose you have two departments in you organization and both departments have application which needs more fine grained control. We can use namespaces to separate the workload of each departments.
By default kubernetes will have three namespace
List namespace $ kubectl get ns NAME STATUS AGE default Active 39h kube-public Active 39h kube-system Active 39hdefault : All Pods that we manually create will go to this namespace (There are ways to change it , but for now that is what it is).</description></item><item><title>Self Healing - Readiness</title><link>https://kubernetes.ansilh.com/03-pods/06-self-healing-readiness/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/03-pods/06-self-healing-readiness/index.html</guid><description>Readiness Probe We have seen that our coffee application was listening on port 9090. Lets assume that the application is not coming up but Pod status showing running. Everyone will think that application is up. You entire application stack might get affected because of this.
So here comes the question , &amp;ldquo;How can I make sure my application is started, not just the Pod ?&amp;rdquo;
Here we can use Pod spec, Readiness probe.</description></item><item><title>Self Healing - Liveness</title><link>https://kubernetes.ansilh.com/03-pods/07-self-healing-liveness/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/03-pods/07-self-healing-liveness/index.html</guid><description>Liveness Probe Lets assume the application failed after readiness probe execution completes Again we are back to service unavailability
To avoid this , we need a liveness check which will do a periodic health check after Pod start running or readiness probe completes.
Lets rewrite the Pod specification of Coffee App and add a liveness Probe.
$ vi pod-liveiness.yamlapiVersion: v1 kind: Pod metadata: name: coffee-app spec: containers: - image: ansilh/demo-coffee name: coffee readinessProbe: initialDelaySeconds: 10 httpGet: port: 9090 livenessProbe: periodSeconds: 5 httpGet: port: 9090Create Pod $ kubectl create -f pod-liveness.</description></item><item><title>Resource Allocation</title><link>https://kubernetes.ansilh.com/03-pods/08-request-limits/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/03-pods/08-request-limits/index.html</guid><description>Limits We can limit the CPU and Memory usage of a container so that one
Lets create the coffee Pod again with CPU and Memory limits
apiVersion: v1 kind: Pod metadata: labels: name: coffee-limits spec: containers: - image: ansilh/demo-coffee name: coffee resources: limits: CPU: 100m Memory: 123MiResulting container will be allowed to use 100 millicores and 123 mebibyte (~128 Megabytes)
CPU One CPU core is equivalent to 1000m (one thousand millicpu or one thousand millicores) CPU is always expressed as an absolute quantity, never as a relative quantity; 0.</description></item></channel></rss>