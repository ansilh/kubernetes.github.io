<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ELK Stack on Hugo Relearn Theme</title><link>https://kubernetes.ansilh.com/20-elk_stack/index.html</link><description>Recent content in ELK Stack on Hugo Relearn Theme</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 Dec 2018 17:15:52 +0000</lastBuildDate><atom:link href="https://kubernetes.ansilh.com/20-elk_stack/index.xml" rel="self" type="application/rss+xml"/><item><title>Elastic Search</title><link>https://kubernetes.ansilh.com/20-elk_stack/01-elastic-search/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/20-elk_stack/01-elastic-search/index.html</guid><description>We will create volumes with hostpath for testing purposes. In production , we will use PVs from a volume provisioner or we will use dynamic volume provisioning
Create volumes according to the number of nodes cat &amp;lt;&amp;lt;EOF &amp;gt;es-volumes-manual.yaml --- kind: PersistentVolume apiVersion: v1 metadata: name: pv-001 labels: type: local spec: storageClassName: manual capacity: storage: 50Gi accessModes: - ReadWriteOnce hostPath: path: &amp;#34;/tmp/data01&amp;#34; --- kind: PersistentVolume apiVersion: v1 metadata: name: pv-002 labels: type: local spec: storageClassName: manual capacity: storage: 50Gi accessModes: - ReadWriteOnce hostPath: path: &amp;#34;/tmp/data02&amp;#34; --- kind: PersistentVolume apiVersion: v1 metadata: name: pv-003 labels: type: local spec: storageClassName: manual capacity: storage: 50Gi accessModes: - ReadWriteOnce hostPath: path: &amp;#34;/tmp/data03&amp;#34; --- EOF$ kubectl create -f es-volumes-manual.</description></item><item><title>Kibana</title><link>https://kubernetes.ansilh.com/20-elk_stack/02-kibana/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/20-elk_stack/02-kibana/index.html</guid><description>cat &amp;lt;&amp;lt;EOF &amp;gt;kibana.yaml apiVersion: v1 kind: Service metadata: name: kibana namespace: kube-logging labels: app: kibana spec: ports: - port: 5601 selector: app: kibana --- apiVersion: apps/v1 kind: Deployment metadata: name: kibana namespace: kube-logging labels: app: kibana spec: replicas: 1 selector: matchLabels: app: kibana template: metadata: labels: app: kibana spec: containers: - name: kibana image: docker.elastic.co/kibana/kibana-oss:6.4.3 resources: limits: cpu: 1000m requests: cpu: 100m env: - name: ELASTICSEARCH_URL value: http://elasticsearch:9200 ports: - containerPort: 5601 EOFkubectl create -f kibana.</description></item><item><title>Send logs via Fluent-bit</title><link>https://kubernetes.ansilh.com/20-elk_stack/03-fluent-bit/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/20-elk_stack/03-fluent-bit/index.html</guid><description>cat &amp;lt;&amp;lt;EOF &amp;gt;fluent-bit-service-account.yaml apiVersion: v1 kind: ServiceAccount metadata: name: fluent-bit namespace: kube-logging EOF$ kubectl create -f fluent-bit-service-account.yaml Output
serviceaccount/fluent-bit createdcat &amp;lt;&amp;lt;EOF &amp;gt;fluent-bit-role.yaml apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRole metadata: name: fluent-bit-read rules: - apiGroups: [&amp;#34;&amp;#34;] resources: - namespaces - pods verbs: - get - list - watch EOF$ kubectl create -f fluent-bit-role.yaml Output
clusterrole.rbac.authorization.k8s.io/fluent-bit-read createdcat &amp;lt;&amp;lt;EOF &amp;gt;fluent-bit-role-binding.yaml apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: fluent-bit-read roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: fluent-bit-read subjects: - kind: ServiceAccount name: fluent-bit namespace: kube-logging EOF$ kubectl create -f fluent-bit-role-binding.</description></item></channel></rss>