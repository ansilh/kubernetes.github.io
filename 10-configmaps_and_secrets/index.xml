<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ConfigMaps and Secrets on Hugo Relearn Theme</title><link>https://kubernetes.ansilh.com/10-configmaps_and_secrets/index.html</link><description>Recent content in ConfigMaps and Secrets on Hugo Relearn Theme</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 Dec 2018 17:15:52 +0000</lastBuildDate><atom:link href="https://kubernetes.ansilh.com/10-configmaps_and_secrets/index.xml" rel="self" type="application/rss+xml"/><item><title>ConfigMaps</title><link>https://kubernetes.ansilh.com/10-configmaps_and_secrets/02-configmaps/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/10-configmaps_and_secrets/02-configmaps/index.html</guid><description>In this session , we will explore the use of ConfigMaps.
If you want to customize the configuration of an application inside a Pod , you have to change the configuration files inside the container and then we have to wait for the application to re-read the updated configuration file.
When Pod lifecycle ends , the changes we made will be lost and we have to redo the same changes when the Pod comes-up.</description></item><item><title>Use ConfigMaps in Pods</title><link>https://kubernetes.ansilh.com/10-configmaps_and_secrets/03-access-configmap/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/10-configmaps_and_secrets/03-access-configmap/index.html</guid><description>Define a container environment variable with data from a single ConfigMap Define an environment variable as a key-value pair in a ConfigMap: $ kubectl create configmap special-config --from-literal=special.how=very Assign the special.how value defined in the ConfigMap to the SPECIAL_LEVEL_KEY environment variable in the Pod specification. apiVersion: v1 kind: Pod metadata: name: test-pod spec: containers: - name: test-container image: k8s.gcr.io/busybox command: [ &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;env&amp;#34; ] env: # Define the environment variable - name: SPECIAL_LEVEL_KEY valueFrom: configMapKeyRef: # The ConfigMap containing the value you want to assign to SPECIAL_LEVEL_KEY name: special-config # Specify the key associated with the value key: special.</description></item><item><title>Create Secret</title><link>https://kubernetes.ansilh.com/10-configmaps_and_secrets/04-secrets/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/10-configmaps_and_secrets/04-secrets/index.html</guid><description>A Secret is an object that contains a small amount of sensitive data
To use a secret, a pod needs to reference the secret. A secret can be used with a pod in two ways: as files in a volume mounted on one or more of its containers, or used by kubelet when pulling images for the pod
Secrets will be stored as base64 encoded values and it will be used mostly during creation of an object</description></item><item><title>Use Secret in Pods</title><link>https://kubernetes.ansilh.com/10-configmaps_and_secrets/05-use-secrets/index.html</link><pubDate>Sat, 29 Dec 2018 17:15:52 +0000</pubDate><guid>https://kubernetes.ansilh.com/10-configmaps_and_secrets/05-use-secrets/index.html</guid><description>Using secrets We can use secrets as environmental variable as well as mounts inside a Pod
Injecting as environmental variable $ vi pod-secret.yamlapiVersion: v1 kind: Pod metadata: labels: run: debugger name: debugger spec: containers: - image: ansilh/debug-tools name: debugger env: - name: USER valueFrom: secretKeyRef: name: my-secret key: user - name: PASSWORD valueFrom: secretKeyRef: name: my-secret key: password$ kubectl create -f pod-secret.yaml$ kubectl get pods NAME READY STATUS RESTARTS AGE debugger 1/1 Running 0 17s Logon to container and verify the environmental variables</description></item></channel></rss>